{"remainingRequest":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\src\\views\\Login.vue?vue&type=style&index=0&id=26084dc2&lang=css&","dependencies":[{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\src\\views\\Login.vue","mtime":1731935415105},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci53cmFwcGVyIHsKICBoZWlnaHQ6IDEwMHZoOwogIG92ZXJmbG93OiBoaWRkZW47IC8qIFByZXZlbnQgc2Nyb2xsaW5nICovCn0K"},{"version":3,"sources":["Login.vue"],"names":[],"mappings":";AA4IA;AACA;AACA;AACA","file":"Login.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"wrapper\" :style=\"background\">\n    <!-- Welcome Section -->\n    <div style=\"text-align: center; margin-top: 200px\">\n      <h1 style=\"font-size: 50px; color: white\">\n        Tuition Management System\n      </h1>\n    </div>\n\n    <!-- Login Form Section -->\n    <div style=\"margin: 200px auto; margin-top: 0; background-color: #fff; width: 350px; height: 400px; padding: 20px; border-radius: 10px\">\n      <div style=\"margin: 20px 0; text-align: center; font-size: 24px\">\n        <b>Login</b>\n      </div>\n\n      <el-form :model=\"user\" :rules=\"rules\" ref=\"userForm\">\n        <!-- Username Input -->\n        <el-form-item prop=\"username\">\n          <el-input size=\"medium\" style=\"margin: 10px 0\" prefix-icon=\"el-icon-user\" v-model=\"user.username\"></el-input>\n        </el-form-item>\n\n        <!-- Password Input -->\n        <el-form-item prop=\"password\">\n          <el-input size=\"medium\" style=\"margin: 10px 0\" prefix-icon=\"el-icon-lock\" show-password v-model=\"user.password\"></el-input>\n        </el-form-item>\n\n        <!-- Verification Code Input -->\n        <el-form-item>\n          <el-col :span=\"24\">\n            <el-input\n                placeholder=\"Please enter the verification code\"\n                v-model=\"code\"\n            ></el-input>\n            <div class=\"login-code\" width=\"100%\" @click=\"refreshCode\">\n              <!-- Verification Code Component -->\n              <dentify :identifyCode=\"identifyCode\"></dentify>\n            </div>\n          </el-col>\n        </el-form-item>\n\n        <!-- Role Selector -->\n        <el-form-item prop=\"role\">\n          <el-select v-model=\"user.role\" placeholder=\"Please select\">\n            <el-option\n                v-for=\"item in options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n\n        <!-- Action Buttons -->\n        <el-form-item style=\"margin: 10px 0; text-align: right\">\n          <el-button type=\"primary\" size=\"small\" autocomplete=\"off\" @click=\"login\">Login</el-button>\n          <el-button type=\"warning\" size=\"small\" autocomplete=\"off\" @click=\"$router.push('/register')\">Register</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n  </div>\n</template>\n\n<script>\nimport dentify from \"./dentify\";\n\nexport default {\n  name: \"Login\",\n  components: {\n    dentify,\n  },\n  data() {\n    return {\n      // Background styling for the page\n      background: {\n        backgroundImage: `url(${require('../assets/background.jpg')})`, // Background image\n        backgroundRepeat: 'no-repeat', // Prevent background repetition\n        backgroundSize: 'cover', // Cover entire container\n        backgroundColor: '#000', // Fallback background color\n        backgroundPosition: 'center top' // Position background image\n      },\n      user: {}, // User data\n      options: [\n        { value: '2', label: 'Student' },\n        { value: '1', label: 'Admin' },\n      ],\n      code: '', // User-entered verification code\n      identifyCodes: \"1234567890abcdefjhijklinopqrsduvwxyz\", // Pool of characters for verification code\n      identifyCode: \"\", // Generated verification code\n      rules: {\n        username: [\n          { required: true, message: 'Please enter your username', trigger: 'blur' },\n          { min: 3, max: 10, message: 'The length is 3 to 10 characters', trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: 'Please enter your password', trigger: 'blur' },\n          { min: 1, max: 20, message: 'The length is 1 to 20 characters', trigger: 'blur' }\n        ],\n      },\n    };\n  },\n  mounted() {\n    // Initialize the verification code on component mount\n    this.identifyCode = \"\";\n    this.makeCode(this.identifyCodes, 4);\n  },\n  methods: {\n    // Handles user login\n    login() {\n      this.request.post(\"/user/login\", this.user).then(res => {\n        if (res.code === '200') {\n          // Store user data and navigate based on role\n          localStorage.setItem(\"user\", JSON.stringify(res.data[0]));\n          const redirectPath = this.user.role === '1' ? \"/\" : \"/front/home\";\n          this.$router.push(redirectPath);\n          this.$message.success(\"Login successful\");\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    // Resets the verification code\n    refreshCode() {\n      this.identifyCode = \"\";\n      this.makeCode(this.identifyCodes, 4);\n    },\n    // Generates the verification code\n    makeCode(chars, length) {\n      for (let i = 0; i < length; i++) {\n        this.identifyCode += chars[this.randomNum(0, chars.length)];\n      }\n    },\n    // Generates a random number between min and max\n    randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n  }\n};\n</script>\n\n<style>\n.wrapper {\n  height: 100vh;\n  overflow: hidden; /* Prevent scrolling */\n}\n</style>\n"]}]}