{"remainingRequest":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js!D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\src\\views\\Analysis.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\src\\views\\Analysis.vue","mtime":1731935181880},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\babel.config.js","mtime":1731236695489},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\GItHubProjects\\MobileApp_PaymentSystem\\Payment\\AdminSystem\\Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"AAmBA;AAEA;EACAA;EACAC;IACA;MACAC;IACA;EACA;;EACAC;IACA;EACA;;EACAC;IACA;IACAC;MACA;QACA;QACAC;QACA;QACA;QACA;QACA;QACA;MACA;IACA;IACA;IACAC;MACA;MACA;MAEA;MACA;;MAEA;QACAC;UACAC;UACAC;QACA;QACAC;UACAC;UACAC;YACAC;UACA;QACA;QACAC;UACAD;UACAb;QACA;QACAe;UACAF;UACAG;QACA;QACAC,SACA;UACAlB;UACAc;UACAb;UACAkB;YACAC;UACA;QACA;MAEA;MAEAC;;MAEA;MACAC;QACAD;MACA;IACA;IACA;IACAE;MACA;MACA;MAEA,mBACA;QAAAC;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,GACA;QAAAF;QAAAC;QAAAC;MAAA,EACA;MAEA;QACA;QACA;QACA;MACA;MAEA;QACAlB;UACAC;UACAC;QACA;QACAC;UACAC;QACA;QACAG;UACAD;UACAb;QACA;QACAe;UACAF;UACAG;QACA;QACAC,SACA;UACAlB;UACAc;UACAb;UACA0B;QACA;MAEA;MAEAN;MACAC;IACA;IACA;IACAM;MACA;MACA;MAEA,uCACAC,0EACAC;QACA;QACA;QACA;QACA;MACA;MAEA;QACAtB;UACAC;UACAC;QACA;QACAC;UACAC;UACAmB,qBACA;QACA;QACAhB;UACAD;UACAd;UACAgC;UACAC;QACA;QACAjB;UACAF;UACAd;UACAgC;UACAC;QACA;QACAf,SACA;UACAlB;UACAc;UACAb;UACAiC;UAAA;UACAf;YACAC;cACA;cACA;cACA;cACA;YACA;UACA;QACA;MAEA;;MAEAC;MACAC;IACA;IACA;IACAa;MACA;MACA;MAEA;MACA;QACA;UACAC;QACA;MACA;MAEA;QAAApC;QAAAqC;MAAA;MAEA;QACA7B;UACAC;UACAC;QACA;QACAC;UACAC;UACAmB;QACA;QACAO;UACAC;UACA7B;QACA;QACAQ,SACA;UACAlB;UACAc;UACA0B;UACAvC;UACAwC;YACAtB;cACAuB;cACAC;cACAC;YACA;UACA;QACA;MAEA;MAEAvB;MACAC;IACA;EACA;AACA","names":["name","data","paymentData","mounted","methods","fetchData","console","initChart","title","text","left","tooltip","trigger","axisPointer","type","xAxis","yAxis","minInterval","series","itemStyle","color","myChart","window","initLineChart","min","max","count","smooth","initScatterChart","filter","map","formatter","nameLocation","nameGap","symbolSize","initPieChart","paymentMethods","value","legend","orient","radius","emphasis","shadowBlur","shadowOffsetX","shadowColor"],"sourceRoot":"src/views","sources":["Analysis.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <!-- Quadrants for displaying ECharts components -->\n    <div class=\"quadrant top-left\">\n      <div class=\"echart\" id=\"myChart\"></div>\n    </div>\n    <div class=\"quadrant top-right\">\n      <div class=\"echart\" id=\"myChart1\"></div>\n    </div>\n    <div class=\"quadrant bottom-left\">\n      <div class=\"echart\" id=\"myChart2\"></div>\n    </div>\n    <div class=\"quadrant bottom-right\">\n      <div class=\"echart\" id=\"myChart3\"></div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as echarts from 'echarts';\n\nexport default {\n  name: 'QuadrantLayout',\n  data() {\n    return {\n      paymentData: [], // Holds payment-related data fetched from the server\n    };\n  },\n  mounted() {\n    this.fetchData(); // Fetch data when the component is mounted\n  },\n  methods: {\n    // Fetches payment data from the API\n    fetchData() {\n      this.request.get(\"/tuitionInvoice/list\").then(res => {\n        this.paymentData = res.data; // Store fetched data\n        console.log(this.paymentData);\n        // Initialize all charts after data is fetched\n        this.initChart();\n        this.initLineChart();\n        this.initScatterChart();\n        this.initPieChart();\n      });\n    },\n    // Initializes the bar chart for payment status statistics\n    initChart() {\n      const chartDom = document.getElementById('myChart');\n      const myChart = echarts.init(chartDom);\n\n      const paidCount = this.paymentData.filter(item => item.status === 1).length; // Paid count\n      const unpaidCount = this.paymentData.filter(item => item.status === 0).length; // Unpaid count\n\n      const option = {\n        title: {\n          text: 'Tuition payment status statistics',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'shadow'\n          }\n        },\n        xAxis: {\n          type: 'category',\n          data: ['Paid', 'Non-payment']\n        },\n        yAxis: {\n          type: 'value',\n          minInterval: 1\n        },\n        series: [\n          {\n            name: 'Number of people',\n            type: 'bar',\n            data: [paidCount, unpaidCount],\n            itemStyle: {\n              color: params => (params.dataIndex === 0 ? '#91cc75' : '#ee6666')\n            }\n          }\n        ]\n      };\n\n      myChart.setOption(option);\n\n      // Ensure chart resizes responsively\n      window.addEventListener('resize', () => {\n        myChart.resize();\n      });\n    },\n    // Initializes the line chart for single payment distribution\n    initLineChart() {\n      const chartDom = document.getElementById('myChart1');\n      const myChart = echarts.init(chartDom);\n\n      const feeRanges = [\n        { min: 0, max: 1000, count: 0 },\n        { min: 1000, max: 2000, count: 0 },\n        { min: 2000, max: 3000, count: 0 },\n        { min: 3000, max: 4000, count: 0 },\n        { min: 4000, max: Infinity, count: 0 }\n      ];\n\n      this.paymentData.forEach(item => {\n        const fee = item.totalFee;\n        const range = feeRanges.find(range => fee >= range.min && fee < range.max);\n        if (range) range.count++;\n      });\n\n      const option = {\n        title: {\n          text: 'Single payment',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: ['<1000', '1000-2000', '2000-3000', '3000-4000', '>4000']\n        },\n        yAxis: {\n          type: 'value',\n          minInterval: 1\n        },\n        series: [\n          {\n            name: 'Number of students',\n            type: 'line',\n            data: feeRanges.map(range => range.count),\n            smooth: true\n          }\n        ]\n      };\n\n      myChart.setOption(option);\n      window.addEventListener('resize', () => myChart.resize());\n    },\n    // Initializes the scatter chart for payment time distribution\n    initScatterChart() {\n      const chartDom = document.getElementById('myChart2');\n      const myChart = echarts.init(chartDom);\n\n      const paymentDelays = this.paymentData\n          .filter(item => item.status === 1 && item.createdTime && item.paymentTime)\n          .map(item => {\n            const createdDate = new Date(item.createdTime);\n            const paymentDate = new Date(item.paymentTime);\n            const daysToPayment = Math.round((paymentDate - createdDate) / (1000 * 60 * 60 * 24));\n            return [daysToPayment, item.totalFee, item.studentName];\n          });\n\n      const option = {\n        title: {\n          text: 'Student payment time distribution',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: params =>\n              `Student: ${params.data[2]}<br/>Delay in payment: ${params.data[0]} days<br/>Tuition fee: ${params.data[1]}`\n        },\n        xAxis: {\n          type: 'value',\n          name: 'Payment delay (days)',\n          nameLocation: 'middle',\n          nameGap: 30\n        },\n        yAxis: {\n          type: 'value',\n          name: 'Tuition Fee',\n          nameLocation: 'middle',\n          nameGap: 30\n        },\n        series: [\n          {\n            name: 'Time of payment',\n            type: 'scatter',\n            data: paymentDelays,\n            symbolSize: data => Math.sqrt(data[0]) * 2 + 5, // Adjust symbol size based on payment delay\n            itemStyle: {\n              color: params => {\n                const delay = params.data[0];\n                if (delay <= 7) return '#91cc75'; // Within one week\n                if (delay <= 30) return '#fac858'; // Within one month\n                return '#ee6666'; // More than one month\n              }\n            }\n          }\n        ]\n      };\n\n      myChart.setOption(option);\n      window.addEventListener('resize', () => myChart.resize());\n    },\n    // Initializes the pie chart for payment methods\n    initPieChart() {\n      const chartDom = document.getElementById('myChart3');\n      const myChart = echarts.init(chartDom);\n\n      const paymentMethods = {};\n      this.paymentData.forEach(item => {\n        if (item.paymentMethod) {\n          paymentMethods[item.paymentMethod] = (paymentMethods[item.paymentMethod] || 0) + 1;\n        }\n      });\n\n      const pieData = Object.entries(paymentMethods).map(([name, value]) => ({ name, value }));\n\n      const option = {\n        title: {\n          text: 'Payment method statistics',\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: '{a} <br/>{b}: {c} ({d}%)'\n        },\n        legend: {\n          orient: 'vertical',\n          left: 'left'\n        },\n        series: [\n          {\n            name: 'Payment method',\n            type: 'pie',\n            radius: '50%',\n            data: pieData,\n            emphasis: {\n              itemStyle: {\n                shadowBlur: 10,\n                shadowOffsetX: 0,\n                shadowColor: 'rgba(0, 0, 0, 0.5)'\n              }\n            }\n          }\n        ]\n      };\n\n      myChart.setOption(option);\n      window.addEventListener('resize', () => myChart.resize());\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Main container styles */\n.container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-template-rows: 1fr 1fr;\n  gap: 10px;\n  height: 100%;\n  width: 100%;\n  max-width: 100vw;\n  max-height: 100vh;\n  box-sizing: border-box;\n  padding: 10px;\n}\n\n/* Styles for each quadrant */\n.quadrant {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 24px;\n  border: 1px solid #ccc;\n  overflow: hidden;\n}\n\n/* ECharts container styles */\n.echart {\n  width: 100%;\n  height: 100%;\n}\n</style>\n"]}]}