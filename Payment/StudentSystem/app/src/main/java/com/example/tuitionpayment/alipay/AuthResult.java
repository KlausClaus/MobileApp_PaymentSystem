package com.example.tuitionpayment.alipay;import android.text.TextUtils;import java.util.Map;/** * Represents the result of an Alipay authorization operation. * Contains details such as result status, memo, result codes, and authorization codes. */public class AuthResult {	/**	 * Status of the result, e.g., success or failure.	 */	private String resultStatus;	/**	 * The raw result string returned by Alipay.	 */	private String result;	/**	 * Additional memo information about the result.	 */	private String memo;	/**	 * The result code indicating the outcome of the authorization.	 */	private String resultCode;	/**	 * The authorization code provided by Alipay.	 */	private String authCode;	/**	 * The Alipay open ID for the authorized account.	 */	private String alipayOpenId;	/**	 * Constructs an {@code AuthResult} object by parsing the raw result map returned by Alipay.	 *	 * @param rawResult      The raw result map from Alipay.	 * @param removeBrackets Flag indicating whether to remove enclosing quotation marks from values.	 */	public AuthResult(Map<String, String> rawResult, boolean removeBrackets) {		if (rawResult == null) {			return;		}		for (String key : rawResult.keySet()) {			if (TextUtils.equals(key, "resultStatus")) {				resultStatus = rawResult.get(key);			} else if (TextUtils.equals(key, "result")) {				result = rawResult.get(key);			} else if (TextUtils.equals(key, "memo")) {				memo = rawResult.get(key);			}		}		String[] resultValue = result.split("&");		for (String value : resultValue) {			if (value.startsWith("alipay_open_id")) {				alipayOpenId = removeBrackets(getValue("alipay_open_id=", value), removeBrackets);				continue;			}			if (value.startsWith("auth_code")) {				authCode = removeBrackets(getValue("auth_code=", value), removeBrackets);				continue;			}			if (value.startsWith("result_code")) {				resultCode = removeBrackets(getValue("result_code=", value), removeBrackets);				continue;			}		}	}	/**	 * Removes enclosing quotation marks from the given string, if requested.	 *	 * @param str    The string to process.	 * @param remove Flag indicating whether to remove quotation marks.	 * @return The processed string.	 */	private String removeBrackets(String str, boolean remove) {		if (remove) {			if (!TextUtils.isEmpty(str)) {				if (str.startsWith("\"")) {					str = str.replaceFirst("\"", "");				}				if (str.endsWith("\"")) {					str = str.substring(0, str.length() - 1);				}			}		}		return str;	}	@Override	public String toString() {		return "authCode={" + authCode + "}; resultStatus={" + resultStatus + "}; memo={" + memo + "}; result={" + result + "}";	}	/**	 * Extracts the value for a specific key from the given data string.	 *	 * @param header The key to look for.	 * @param data   The string containing the key-value pair.	 * @return The value corresponding to the key.	 */	private String getValue(String header, String data) {		return data.substring(header.length(), data.length());	}	/**	 * @return the resultStatus	 */	public String getResultStatus() {		return resultStatus;	}	/**	 * @return the memo	 */	public String getMemo() {		return memo;	}	/**	 * @return the result	 */	public String getResult() {		return result;	}	/**	 * @return the resultCode	 */	public String getResultCode() {		return resultCode;	}	/**	 * @return the authCode	 */	public String getAuthCode() {		return authCode;	}	/**	 * @return the alipayOpenId	 */	public String getAlipayOpenId() {		return alipayOpenId;	}}